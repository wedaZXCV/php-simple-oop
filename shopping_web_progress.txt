hint: find PROGRESS NOW words to get immediately into current progress.

MAIN FEATURE COMPLETE:
Product page	>> done!!

Main Cart page	>> On progress.

in Cart page	>> pending.

We are going to create shopping web application (simple) based on PHP Object Oriented Programming.
Object Oriented Programming should not change the index.php
Everything need to be displayed by the main page (index.php) will be imported from support php file. In order to make up its functionality, This style of programming only change the support file.
App Description:
The app has Product.php, Cart.php, and CartItem.php. 
So on the index.php, we have several button lead for its respective features. There are:
1. Product	>> Handle the product listing and its quantity on stock. Add and Remove the product based on stock		>> This is actually for shop officer (maybe we can add password for this later)
2. Cart		>> Handle Cart for the customer to store item for purchase.

**** Cart features:
on Cart Object:
1. Add item
There is only one method to add item into cart. It is from Cart object. 
cart->addItem($productname, quantity)
cart->addItem($product2, quantity)
do this by selecting product from display list (checklist) then ask for quantity using input number.
LATER, Add item maybe including search function to make ease the finding. Do search and display possible product, of course with its checklist box and quantity. Also revert button to return into initial product list display.

2. Remove item
Remove the specified item(s) from cart. If the quantity goes zero, remove the product from the cart list.
the method to remove the item is by calling Cart object function, passing product name and the quantity to remove.
Later on GUI app, We accomplish this by selecting product from display list (checklist), then give number input to define quantity to remove. Next to the quantity to remove, there is [ALL] button to allow user remove all of the selected product >> set the number input automatically to max quantity found.

<<<<FROM ADD_ITEM AND REMOVE_ITEM ABOVE, WE CAN CONCLUDE THAT THE PROCESS HAPPENS SIMULTANEOUSLY, WE SEND TO CART TABLE IN DATABASE ON ONE GO (One connection accomplish multiple creating new entry). >>>>

3. Display item
Check the carried item(s) inside the cart. It always do display for the beginning of Cart Menu.
4. Remove All
Clear everything on Cart.
5. Get total Quantity
Total Qtt is displayed on the top corner left of Cart page, automatically change with user changing value on the page. (maybe it will use javascript things, IDK).
6. Get total sum
Total sum is displayed on the top corner right of Cart page, automatically change with user changing value on the page. (maybe it will use javascript things, IDK).

<<<<Both of get total quantity and total sum is displayed before purchasing. So it is shown after user clicking [BUY] button.>>>>

7. Buy
The purchasing lead to downloading file action (pdf) which shows the list, total qtt, and total sum of items. pdf download is confirmed by clicking [CONFIRM PURCHASE] button.

8. And back to Cart Main Menu.
9. Toogle Cart
Toogle cart allows the user to move from one cart into another. It is done by clicking a simple arrow button at top left and top right of the current Cart page. If there is none, it doesn't show. If it is the last cart, the right arrow doesn't show. If this is the first cart, the left arrow doesnot show up.

on Cart Main Menu:
1. Creating Cart
Make Cart Object by a simple button, then it asks for the cart name using pop up >> submit. The submit actually do create new Cart object, then create new table inside predefined database. The table name is regexed (if it contain space ) to change space into underscore. Do this on everytime communicating with database.
2. Displaying available cart
No Cart Exist shown if no Cart object is created before. This display a button to access Cart page based on cart table name.
3. Destroy Cart
4. Destroy all Cart
5. Back to main page

<<<<Current Cart page displaying the Name of current cart, And it's index number. Index number is resetted when the cart destroyed.>>>>

**** Product features:
1. Add product + quantity for stock + pricing
2. Remove product


<<<< All is done manually by the administrator officer. >>>>







PROGRESS:





<<<<<<<<<<<<<<< ON PRODUCT PAGE >>>>>>>>>>>>>>>>>>>>>>>
creating the product features.
>>> currently on completing productPage.inc.php

the product table should consist of these following entries:
1.	productID	>>> id
2.	productName	>>> name
3.	price		>>> price
4.	Quantity	>>> qtt

>>> auto create data base and table is success!!


now working with displayUI of product page (productPage.inc.php)
the displayUI comes with add entries which will link the user from product.php to newProduct.php.
* product.php harness productPage.inc.php	>> the basic is done
* newProduct.php harness product.inc.php	>> the basic is done

product.inc.php add new product to database.	>> add product is done (success adding into database)

fix the product displaying of product list on product.php	>> done!




remove all product		>> done!

checkbox next to the each product	>> done!

on several items are checked:
show [delete selected] to delete selected item (the button is at the top and bottom of the list item)
>>>> successfully delete the selected item from database.

on mouse hover at a row:
appearing/disappearing delete button	(on the dead right side of each row)  << done! with id indexing. *still require add the delete functionality on database ( on product.inc.php) << done!

PROGRESS NOW
{
appearing/disappearing price input (next to each row's price)
progress:
the standard displaying is done, but the linking to correct php function is still not working.
solution is using link. We can not modify it in the same page. So we need link via number to access modify.php

appearing/disappearing quantity input (next to each row's quantity)
progress:
the standard displaying is done, but the linking to correct php function is still not working.

DONE !!!   << we are not using in page quantity modifier, but re-directing into new page and there makes changes (hyperlink tag)
}

* price input and quantity input has checkmark just next to it as an apply button	<< no need, currently using huperlink tag
* place on split cell for them								<< no need, currently using huperlink tag
* the name cannot be edited. Consider creating new product instance.

auto increments id...   << relates with add new product    << done!!

sort by:
	the sort functionality can be defined by id, name, price, and quantity in stock.
	default, initial sorting is by name.		   << done!!


pagination:
	pagination is right before item table
	*note: the pagination will change most of the displaying method, especially on displayListProduct function. So here is the new algorithm:

	$this->fetchData()	<< on fetch data, we are doing assigning $row into new usable array.
	$this->paginationDisplay()	<< we manage pagination based on the new array.
	$this->displayListProduct()	<< display using new array.
PROGRESS NOW
# finish the paginationDisplay
# re-factor the displayListProduct()
PROGRESS NOW
# follow the error  << especially on unserialize error		done!!

pagination success, but id doesn't work with the sorting. The sorting mode is reseted (to name by default) while accessing another pages, resulting incorrect items displaying.	done!!

Pagination is now all success and reliable to use.

search-bar:
	search-bar is above pagination, under Clear All, right side of the web page.   << done!!

PROGRESS NOW
	apply some CSS formatting



*notes for improvement:
1.	learn about session storage. 	<< this is for if  new page is loaded, we don't need to fetch data from database anymore. (correlates with fetchData function).
2.	we can add (based on sort mode) hint characther to each pagination. For example, if item with initial letter R can be found in page 12, so we add.... maybe this will just create a dedicated draw display to do so (to find beginning letter, like dictionary)

<<<<<<<<<<<<<<< END OF PRODUCT PAGE >>>>>>>>>>>>>>>>>>>>>>>

require class from product.inc.php
Note:
everything on the each of considered main.php is always only consisting of Object method calling. Do not create any HTML code on the main.php (of every of its part).


<<<<<<<<<<<<<<< ON CART MAIN MENU >>>>>>>>>>>>>>>>>>>>>>>
Generate the php file and its class.










<<<<<<<<<<<<<<< END OF CART MAIN MENU >>>>>>>>>>>>>>>>>>>>>>>














